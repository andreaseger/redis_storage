{"name":"Redis Storage","body":"RedisStorage\r\n---\r\n\r\nThis is a little gem which provides a redis interface for models. It works out of the box with rails or can be used standalone.\r\n\r\nBasically I just got sick rewriting the same logic over and over again for each model of my little sinatra apps so this evolved. Then I wanted to write a new rails app an thought having this in a gem would be really nice, and a generator would be awesome.\r\nNow I will add new Feature as I need them. You also can let me know what to add.\r\n\r\n[![Build Status](https://secure.travis-ci.org/sch1zo/redis_storage.png)](http://travis-ci.org/sch1zo/redis_storage)\r\n\r\nFeatures\r\n---\r\n\r\n* stores the attributes_hash of the model as JSON in redis\r\n* creates an index of all used ids(which will be set automatically)\r\n* compatible with the default rails controller\r\n* uses ActiveModel to provide things like validations\r\n* provides a Rails 3 Generator\r\n* indexing of choosen attributes and find_by\r\n\r\nRoadmap aka. ToDo\r\n---\r\n\r\n* perhaps use some stuff from redis-scripting to make more methods atomic (like find_by or update_attributes)\r\n* some wrappers for searching in a model(probably will need some indexes)\r\n* perhaps some kind of dirty flag - or the ActiveModel::Dirty module, but that will make some things way more complicated\r\n* more tests/specs are always good\r\n\r\nNewest Stuff\r\n---\r\n\r\n* indexing for choosen attributes\r\n* new find_by :attr\r\n\r\nInstallation\r\n---\r\n\r\nAs this gem need redis running you will have to install it(see redis.io for more information on that task)\r\n\r\nThen just add the gem to your Gemfile and run bundler\r\n\r\n    gem 'redis_storage'\r\n\r\nor just install it manually\r\n\r\n    gem install redis_storage\r\n\r\nThen this gem will need a global object $db which just is a Redis connection.\r\n\r\n    redis_config = { :host => 'localhost', :port => 6379, :password => '', :db => 1 }\r\n    $db = Redis.new(redis_config)\r\n\r\nUsage\r\n---\r\n\r\nrequire the gem in your code\r\n\r\n    require 'redis_storage'\r\n\r\ncreate a model which inherit from RedisStorage::Model\r\n\r\n    class MyModel < RedisStorage::Model\r\n    ...\r\n    end\r\n\r\nand define the models attributes via self.attrs, additional to the defined attributes there will always be an attribute id\r\n\r\n    attribute :body, :title\r\n\r\nMinimal Example\r\n---\r\n\r\n    require 'redis_storage'\r\n    class MyModel < RedisStorage::Model\r\n      attribute :body, :title\r\n    end\r\n\r\nIndexing and find_by\r\n---\r\n\r\nIf you want or need to find records based on a attribute you have to add it to the index_for array like this.\r\n\r\n    index :some, :attributes, :to, :index\r\n\r\nThe elements should be symbols and have to also be element of attrs.\r\nAfter that you can use the following to get the the instance.\r\n\r\n    MyModel.find_by :key, \"search\"\r\n\r\nAlso I should mention that you should update record only via the update_attributes method, otherwise the indexes will become corrupt.\r\n\r\nRails 3 Integration\r\n---\r\n\r\nto initialize redis there is a rake task\r\n\r\n    rake install_redis\r\n\r\nThe task will install a initializer file which creates the above mentioned $db object and a redis.yml file to configure the redis connection.\r\n\r\nThere is also a Rails 3 Generator which will generates the above mentioned model\r\n\r\n    rails g redis model attr1 attr2\r\n\r\nor\r\n\r\n    rails g scaffold model attr1:string attr2:int -o redis\r\n\r\nmeta\r\n---\r\n\r\nTested with RSpec via [travis-ci](http://travis-ci.org/sch1zo/redis_storage) for\r\n\r\n* ree\r\n* MRI 1.9.{2,3}\r\n* rbx-{18,19}mode\r\n\r\nsch1zo\r\n","tagline":"gem redis ruby","google":"UA-31620626-1","note":"Don't delete this file! It's used internally to help with page regeneration."}